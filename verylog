#!/bin/zsh

THIS_DIR=${0:A:h}
APP=$THIS_DIR/vcgen

zparseopts -D -E -- \
           -no-interpreter=NO_INTERPRETER -just-ir=JUST_IR -just-vcgen=JUST_VCGEN \
           M:=TOPLEVEL_MODULE \
           h=HELP -help=HELP

if [[ $# -eq 0 || -n "$HELP" ]]; then
    echo "usage: $0 [options] <verilog file>"
    echo "
verylog options:
  --just-ir
      Just generate the IR file and print it
  --just-vcgen
      Just generate the file that will be fed to qarmc and print it
  --no-interpreter
      Build the sicstus program rather than interpreting it
  -h, --help
      Prints this help

parser options:
  -M <toplevel module name>
      When the verilog file contains multiple modules, this is used to denote the toplevel one"
    exit 1
fi

FILENAME="${@[-1]}"
shift -p 1

if [[ ! -f $FILENAME ]]; then
    echo "'$FILENAME' is not a regular file"
    exit 1
fi

CONF_FILE="${THIS_DIR}/configuration.sh"
CONF_SKELETON_FILE="${THIS_DIR}/configuration-skeleton.sh"

if [[ -f "$CONF_FILE" ]]; then
    source $CONF_FILE

    IVL=${IVL_DIR:A}/ivl
    IVLPP=${IVL_DIR:A}/ivlpp/ivlpp
    
    if [[ -z "${IVL_DIR}" || ! -x "$IVL" || ! -x "$IVLPP" ]]; then
        echo "IVL_DIR variable in ${CONF_FILE:t} does not seem right"
        echo "currently it's set to ${IVL_DIR:A}"
        exit 1
    fi
    
    QARMC=${HORN_SOLVE_DIR:A}/qarmc5/qarmc
    
    if [[ -z "${HORN_SOLVE_DIR}" || ! -x "$QARMC" ]]; then
        echo "HORN_SOLVE_DIR variable in ${CONF_FILE:t} does not seem right"
        echo "currently it's set to ${HORN_SOLVE_DIR:A}"
        exit 1
    fi

else
    echo "missing ${CONF_FILE}"
    echo "please use the file ${CONF_SKELETON_FILE:t} as a skeleton to create that file"
    exit 1
fi

if [[ -x "$(which rlwrap)" ]]; then
    alias sicstus='rlwrap sicstus'
else
    alias sicstus='sicstus'
fi

LOGFILE="$THIS_DIR/.log.$(date +%F-%H-%M-%S)"

print_IR() {
    (  echo '% vim: set ft=prolog\n:- discontiguous register/1, wire/1, asn/2, module_inst/3.' && $IVL $@ -O >(cat) =($IVLPP $FILENAME) &>$LOGFILE && sed -n 's|^[ \t]*//[ \t]*@annot{\(.*\)}[^}]*|\1.|p' $FILENAME ) || echo 'parse_failed(true).' 
}

IR_FILE=${FILENAME:A:h}/.${FILENAME:t:r:r:r}.pl
HSF_FILE=${FILENAME:A:h}/.${FILENAME:t:r:r:r}.hsf.pl

print_IR $TOPLEVEL_MODULE > $IR_FILE
last_err=$?

if [[ $last_err -ne 0 ]]; then
    echo "error while generating the IR file"
    exit 1
fi

if [[ -n "$JUST_IR" ]]; then
    cat $IR_FILE
    exit 0
fi

if [[ -z "${NO_INTERPRETER}" ]]; then
    pushd $THIS_DIR

    sicstus \
        -f --noinfo --nologo \
        -l 'src/verilog.pl' \
        --goal '(main -> halt; halt(1)).' \
        -- $IR_FILE > $HSF_FILE
    
    last_err=$?

    if [[ $last_err -ne 0 ]]; then
        echo "[PROLOG ERROR]" 1>&2
        cat $LOGFILE
        exit 1 
    else
        rm -f $LOGFILE
    fi

    popd
else
    if make -s -C ${THIS_DIR} && $APP $IR_FILE > $HSF_FILE
    then
        rm -f $LOGFILE
    else
        echo "[PROLOG ERROR]" 1>&2
        cat $LOGFILE
        exit 1 
    fi
fi

if [[ -n "$JUST_VCGEN" ]]; then
    cat $HSF_FILE
    echo
    exit 0
fi

echo '################################################################################'
echo '# TEMPORARY FILES ##############################################################'
echo '################################################################################'
echo "IR  file : ${IR_FILE}"
echo "HSF file : ${HSF_FILE}"
echo '################################################################################'

$QARMC $HSF_FILE

